/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SafeHeartApplication.UserInterfaces;
import SafeHeartApplication.EventUpdate.PatientVitalsData;
import SafeHeartApplication.EventUpdate.Subject;
import SafeHeartApplication.UserInterfaces.PractitionerForm;
//import SafeHeartApplication.ServerDatas.fhirServerData;
import SafeHeartApplication.ServerDatas.PatientData;
import SafeHeartApplication.Users.Clinician;
import SafeHeartApplication.Users.Patient;
import java.util.ArrayList;
import java.util.HashMap;
import SafeHeartApplication.ServerDatas.ClinicianData;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yogeshganesh
 * Sets up the form by displaying a list of clinicians available to check in. 
 * 
 */
public class PractitionerLogin extends javax.swing.JFrame {
    
    private PatientVitalsData subject ; 
    private String  inputId;
    private String  inputFamilyName;
    private String  inputGivenName;
    

    public String getId()
    {
        return this.inputId;
    }
    public String getFamilyName()
    {
        return this.inputFamilyName;
    }
    public String getGivenName()
    {
        return this.inputGivenName;
    }
    
    public void setSubject(PatientVitalsData sub)
    {
        this.subject  = sub ; 
    }
    
    public PatientVitalsData getSubject()
    {
        return this.subject; 
    }
    
    
    /**
     * Getting the list of clinician data available from the helper class. 
     * @return ClinicianData 
     */
    
    public ArrayList getClinicianList()
    {
        
        return ClinicianData.getClinicianData();
                
    }
    
    
    /**
     * Constructor for the PractitionerLogin, initialize the components. 
     * @param sub  the subject of interest to get data after 1 hour each. 
     */
    
    public PractitionerLogin(PatientVitalsData sub)
    {
        setSubject(sub) ;  // initialise the subject. 
        initComponents(); 
        addRowToTable() ; 
        
    }
    
    /**
     * Constructor for the PractitionerLogin, initialize the components. 
     */    
    
    public PractitionerLogin()
    {
        initComponents();  
        addRowToTable() ; 
        
    }

    /*
    *
    * @author Bryan
    * 
    * This method adds data to the tabular database by row. 
    * 
    */    
    public void addRowToTable()
    {
        // retrieve the actual table's model
        DefaultTableModel model = (DefaultTableModel) this.loginPageDetails.getModel();
        
        /* Declaring and retrieving the clinician list */
        ArrayList<Clinician> clinicianList = getClinicianList() ; 

               
        Object rowData [] = new Object[5];
        for(int j=0; j < clinicianList.size();j++)
        {   
            rowData[0] = false ; 
            rowData[1] = clinicianList.get(j).getId();
            rowData[2] = clinicianList.get(j).getPrefix();
            rowData[3] = clinicianList.get(j).getFamilyName();
            rowData[4] = clinicianList.get(j).getGivenName();
                    
            model.addRow(rowData);           
        }      
    }    
      

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        loginPageTitle = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        loginPageDetails = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 255, 255));

        jPanel1.setBackground(new java.awt.Color(0, 255, 255));

        loginPageTitle.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        loginPageTitle.setText("            Clinician Details");

        loginButton.setText("LOGIN");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(282, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(378, 378, 378))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(loginPageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(277, 277, 277))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(loginPageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 281, Short.MAX_VALUE)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );

        loginPageDetails.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        loginPageDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "ID", "Prefix", "Family Name", "Given Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        loginPageDetails.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(loginPageDetails);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 771, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(184, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /*
    *
    * @author Bryan
    * 
    * This method ensures that the next page will display the list of patients of the clinician. 
    * @param evt : action event
    * 
    */  
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) this.loginPageDetails.getModel();
        ArrayList <Integer> index = new ArrayList();
        
        for (int k =0 ; k<model.getRowCount();k++)
        {
            if (model.getValueAt(k,0).equals(true))
            {
                index.add(k);                
            }
        }
        
        for(int a = 0 ; a <index.size();a++)
        {
            String matchedID = null;
            Object clinicianIdObj = model.getValueAt(index.get(a),1);
            String clicID = clinicianIdObj.toString();
            ArrayList<Clinician> list = getClinicianList();
            
            for (int g=0; g < list.size();g++)
            {
                if (list.get(g).getId().equals(clicID))
                {
                    matchedID = list.get(g).getId();
                }
            }
            
            // creating a practitioner form for the window. 
            System.out.println(matchedID);
            
            PatientData.queryPatientData(matchedID);


            PractitionerForm frm = new PractitionerForm(this.subject, matchedID); 
            
            // enabling the display of patients of the clinician 
            frm.setVisible(true);
            this.setVisible(false);                           
        }        
        
    }//GEN-LAST:event_loginButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PractitionerLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PractitionerLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PractitionerLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PractitionerLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PractitionerLogin().setVisible(true);
            }
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loginButton;
    private javax.swing.JTable loginPageDetails;
    private javax.swing.JLabel loginPageTitle;
    // End of variables declaration//GEN-END:variables
}
